name: Build & Auto Pull Request

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      ### ---------- Frontend ----------
      - name: Cache frontend node_modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: frontend-${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            frontend-${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install frontend dependencies
        working-directory: ./
        run: npm ci

      - name: Build frontend
        working-directory: ./
        run: npm run build --if-present

  handle-pr:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Determine PR target dynamically
        id: pr-target
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Current branch: $BRANCH"

          if [[ "$BRANCH" == "development" ]]; then
            echo "pr_target=testing" >> "$GITHUB_OUTPUT"
          elif [[ "$BRANCH" == "testing" ]]; then
            if [ "${{ needs.build.result }}" == "success" ]; then
              echo "pr_target=staging" >> "$GITHUB_OUTPUT"
            else
              echo "pr_target=error-to-development" >> "$GITHUB_OUTPUT"
            fi
          elif [[ "$BRANCH" == "staging" && "${{ needs.build.result }}" == "success" ]]; then
            echo "pr_target=main" >> "$GITHUB_OUTPUT"
          elif [[ "$BRANCH" != "main" && "$BRANCH" != "staging" && "$BRANCH" != "testing" && "$BRANCH" != "development" ]]; then
            echo "pr_target=development" >> "$GITHUB_OUTPUT"
          else
            echo "pr_target=none" >> "$GITHUB_OUTPUT"
          fi

      - name: Send error message to development (if testing fails)
        if: steps.pr-target.outputs.pr_target == 'error-to-development'
        run: echo "❌ Build failed on 'testing'. Notify the development team." # Replace with Slack/Discord webhook etc.

      - name: Create Pull Request
        if: |
          steps.pr-target.outputs.pr_target != 'none' &&
          steps.pr-target.outputs.pr_target != 'error-to-development'
        uses: peter-evans/create-pull-request@v5
        with:
          branch: 'auto-pr/${{ github.ref_name }}-to-${{ steps.pr-target.outputs.pr_target }}' # Creates a new branch for the PR
          base: ${{ steps.pr-target.outputs.pr_target }} # Target branch (e.g., `main`, `development`)
          title: 'Auto PR: ${{ github.ref_name }} → ${{ steps.pr-target.outputs.pr_target }}'
          body: |
            **Automated PR after successful build** ✅  
            **Source Branch:** `${{ github.ref_name }}`  
            **Target Branch:** `${{ steps.pr-target.outputs.pr_target }}`  
            **Triggered by:** @${{ github.actor }}  
            **Build Status:** Success (${{ needs.build.result }})
          commit-message: 'chore: Auto-merge ${{ github.ref_name }} → ${{ steps.pr-target.outputs.pr_target }}'
          labels: 'auto-pr, build-success'
          assignees: 'musabexpressitbd, shifaul-expressitbd' # ${{ github.actor }} Correct parameter (was `assigners`)
          reviewers: 'musabexpressitbd, shifaul-expressitbd' # Comma-separated list
          draft: false # Set to `true` if you want draft PRs
